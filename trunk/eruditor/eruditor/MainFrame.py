# -*- coding: UTF-8 -*-
# generated by wxGlade 0.3.5.1 on Sat Mar 19 16:27:15 2005
#
# Eruditor (ērudītor), a card-based vocabulary training program
# Copyright (C) 2005 Alexander Lee
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

import wx

import os.path

import Config
import AboutDialog
import PropertiesDialog
import TrainerDialog
import AddDialog
import PilesPanel
import CardList

import Types
import Lesson

from Globals import *

# begin wxGlade: dependencies
# end wxGlade

class MainFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # Figure out initial file to open, if any
        try:
            filename = kwds["filename"]
            del kwds["filename"]
        except KeyError:
            filename = None

        self.TOOL_NEW = wx.NewId()
        self.TOOL_OPEN = wx.NewId()
        self.TOOL_SAVE = wx.NewId()
        self.TOOL_SAVEAS = wx.NewId()
        self.TOOL_FLIP = wx.NewId()
        self.TOOL_PROPS = wx.NewId()
        self.TOOL_PREFS = wx.NewId()

        # begin wxGlade: MainFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.mainPanel = wx.Panel(self, -1)
        
        # Menu Bar
        self.menuBar = wx.MenuBar()
        self.SetMenuBar(self.menuBar)
        self.menuLesson = wx.Menu()
        self.menuItemNew = wx.MenuItem(self.menuLesson, wx.NewId(), "&New Lesson", "", wx.ITEM_NORMAL)
        self.menuLesson.AppendItem(self.menuItemNew)
        self.menuItemOpen = wx.MenuItem(self.menuLesson, wx.NewId(), "&Open Lesson...", "Open a previously saved lesson", wx.ITEM_NORMAL)
        self.menuLesson.AppendItem(self.menuItemOpen)
        self.menuItemSave = wx.MenuItem(self.menuLesson, wx.NewId(), "&Save Lesson", "Save the current lesson", wx.ITEM_NORMAL)
        self.menuLesson.AppendItem(self.menuItemSave)
        self.menuItemSaveas = wx.MenuItem(self.menuLesson, wx.NewId(), "Save Lesson &As...", "Save the current lesson to another file", wx.ITEM_NORMAL)
        self.menuLesson.AppendItem(self.menuItemSaveas)
        self.menuItemClose = wx.MenuItem(self.menuLesson, wx.NewId(), "&Close Lesson", "Close the current lesson", wx.ITEM_NORMAL)
        self.menuLesson.AppendItem(self.menuItemClose)
        self.menuLesson.AppendSeparator()
        self.menuItemQuit = wx.MenuItem(self.menuLesson, wx.NewId(), "&Quit", "Goodbye!", wx.ITEM_NORMAL)
        self.menuLesson.AppendItem(self.menuItemQuit)
        self.menuBar.Append(self.menuLesson, "&Lesson")
        self.menuAction = wx.Menu()
        self.menuItemLearn = wx.MenuItem(self.menuAction, wx.NewId(), "&Learn!", "", wx.ITEM_NORMAL)
        self.menuAction.AppendItem(self.menuItemLearn)
        self.menuItemReview = wx.MenuItem(self.menuAction, wx.NewId(), "&Review", "", wx.ITEM_NORMAL)
        self.menuAction.AppendItem(self.menuItemReview)
        self.menuBar.Append(self.menuAction, "&Action")
        self.menuTools = wx.Menu()
        self.menuItemImport = wx.MenuItem(self.menuTools, wx.NewId(), "&Import Cards", "Import cards from another card set or lesson", wx.ITEM_NORMAL)
        self.menuTools.AppendItem(self.menuItemImport)
        self.menuItemExport = wx.MenuItem(self.menuTools, wx.NewId(), "&Export Cards", "", wx.ITEM_NORMAL)
        self.menuTools.AppendItem(self.menuItemExport)
        self.menuTools.AppendSeparator()
        self.menuItemProps = wx.MenuItem(self.menuTools, wx.NewId(), "Lesson P&roperties", "", wx.ITEM_NORMAL)
        self.menuTools.AppendItem(self.menuItemProps)
        self.menuItemPrefs = wx.MenuItem(self.menuTools, wx.NewId(), "Edit Prefere&nces", "", wx.ITEM_NORMAL)
        self.menuTools.AppendItem(self.menuItemPrefs)
        self.menuBar.Append(self.menuTools, "&Tools")
        self.menuHelp = wx.Menu()
        self.menuItemHelp = wx.MenuItem(self.menuHelp, wx.NewId(), "&Help", "Get help", wx.ITEM_NORMAL)
        self.menuHelp.AppendItem(self.menuItemHelp)
        self.menuItemAbout = wx.MenuItem(self.menuHelp, wx.NewId(), "&About", "About this application", wx.ITEM_NORMAL)
        self.menuHelp.AppendItem(self.menuItemAbout)
        self.menuBar.Append(self.menuHelp, "&Help")
        # Menu Bar end
        self.statusBar = self.CreateStatusBar(1, 0)
        
        # Tool Bar
        self.mainToolbar = wx.ToolBar(self, -1)
        self.SetToolBar(self.mainToolbar)
        self.mainToolbar.AddLabelTool(self.TOOL_NEW, "New", wx.Bitmap("img/new.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "New lesson", "")
        self.mainToolbar.AddLabelTool(self.TOOL_OPEN, "Open", wx.Bitmap("img/open.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Open a lesson", "")
        self.mainToolbar.AddLabelTool(self.TOOL_SAVE, "Save", wx.Bitmap("img/save.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Save current lesson", "")
        self.mainToolbar.AddLabelTool(self.TOOL_SAVEAS, "Save As", wx.Bitmap("img/saveas.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Save current lesson to another file", "")
        self.mainToolbar.AddSeparator()
        self.mainToolbar.AddLabelTool(self.TOOL_FLIP, "Flip", wx.Bitmap("img/flip.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Learn a different side", "")
        self.mainToolbar.AddLabelTool(self.TOOL_PROPS, "Properties", wx.Bitmap("img/edit.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Edit lesson properties", "")
        self.mainToolbar.AddSeparator()
        self.mainToolbar.AddLabelTool(self.TOOL_PREFS, "Preferences", wx.Bitmap("img/properties.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Set preferences", "")
        # Tool Bar end
        self.labelLessonTitle = wx.StaticText(self.mainPanel, -1, "TITLE")
        self.labelLessonFocus = wx.StaticText(self.mainPanel, -1, "FOCUS")
        self.pilesPanel = PilesPanel.PilesPanel(self.mainPanel, -1)
        self.cardList = CardList.CardList(self.mainPanel, wx.NewId())
        self.buttonAddCards = wx.Button(self.mainPanel, wx.ID_ADD, "Add")
        self.buttonExpCards = wx.Button(self.mainPanel, wx.NewId(), "Expire")
        self.buttonDelCards = wx.Button(self.mainPanel, wx.ID_REMOVE, "Remove")
        self.buttonShuffleCards = wx.Button(self.mainPanel, wx.NewId(), "Shuffle")
        self.buttonLearnCards = wx.Button(self.mainPanel, wx.NewId(), "Learn!")
        self.buttonReviewCards = wx.Button(self.mainPanel, wx.NewId(), "Review")

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

        # Load initial lesson, connect cardList and pilesPanel, etc.
        self.lesson = Lesson.Lesson(filename)
        self.pilesPanel.SetCardList(self.cardList)
        self._LastDirChanged()
        self._LessonChanged()
        self._BindEvents()

    def __set_properties(self):
        # begin wxGlade: MainFrame.__set_properties
        self.SetTitle("ērudītor")
        self.statusBar.SetStatusWidths([-1])
        # statusbar fields
        statusBar_fields = ["Welcome"]
        for i in range(len(statusBar_fields)):
            self.statusBar.SetStatusText(statusBar_fields[i], i)
        self.mainToolbar.Realize()
        self.labelLessonTitle.SetFont(wx.Font(16, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.labelLessonFocus.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MainFrame.__do_layout
        mainSizer = wx.BoxSizer(wx.VERTICAL)
        sizerSplit = wx.BoxSizer(wx.VERTICAL)
        sizerButtons = wx.BoxSizer(wx.HORIZONTAL)
        sizerSplit.Add(self.labelLessonTitle, 0, wx.ALL|wx.EXPAND|wx.FIXED_MINSIZE, 5)
        sizerSplit.Add(self.labelLessonFocus, 0, wx.LEFT|wx.RIGHT|wx.BOTTOM|wx.EXPAND|wx.FIXED_MINSIZE, 5)
        sizerSplit.Add(self.pilesPanel, 1, wx.ALL|wx.EXPAND, 5)
        sizerSplit.Add(self.cardList, 2, wx.ALL|wx.EXPAND, 5)
        sizerButtons.Add(self.buttonAddCards, 0, wx.RIGHT|wx.EXPAND|wx.FIXED_MINSIZE, 5)
        sizerButtons.Add(self.buttonExpCards, 0, wx.RIGHT|wx.EXPAND|wx.FIXED_MINSIZE, 5)
        sizerButtons.Add(self.buttonDelCards, 0, wx.EXPAND|wx.FIXED_MINSIZE, 5)
        sizerButtons.Add((20, 20), 1, wx.EXPAND|wx.FIXED_MINSIZE, 0)
        sizerButtons.Add(self.buttonShuffleCards, 0, wx.FIXED_MINSIZE, 0)
        sizerButtons.Add(self.buttonLearnCards, 0, wx.LEFT|wx.EXPAND|wx.FIXED_MINSIZE, 5)
        sizerButtons.Add(self.buttonReviewCards, 0, wx.LEFT|wx.EXPAND|wx.FIXED_MINSIZE, 5)
        sizerSplit.Add(sizerButtons, 0, wx.ALL|wx.EXPAND, 5)
        self.mainPanel.SetAutoLayout(True)
        self.mainPanel.SetSizer(sizerSplit)
        sizerSplit.Fit(self.mainPanel)
        sizerSplit.SetSizeHints(self.mainPanel)
        mainSizer.Add(self.mainPanel, 1, wx.EXPAND, 0)
        self.SetAutoLayout(True)
        self.SetSizer(mainSizer)
        mainSizer.Fit(self)
        mainSizer.SetSizeHints(self)
        self.Layout()
        # end wxGlade

        self.sizerSplit = sizerSplit

    def _BindEvents(self):
        """ Connects all events to methods and functions """
        wx.EVT_CLOSE(self, self.OnWindowClose)

        self.Bind(wx.EVT_MENU, self.OnMenuItemNew, self.menuItemNew)
        self.Bind(wx.EVT_MENU, self.OnMenuItemOpen, self.menuItemOpen)
        self.Bind(wx.EVT_MENU, self.OnMenuItemSave, self.menuItemSave)
        self.Bind(wx.EVT_MENU, self.OnMenuItemSaveas, self.menuItemSaveas)
        self.Bind(wx.EVT_MENU, self.OnMenuItemClose, self.menuItemClose)
        self.Bind(wx.EVT_MENU, self.OnMenuItemProps, self.menuItemProps)
        self.Bind(wx.EVT_MENU, self.OnMenuItemPrefs, self.menuItemPrefs)
        self.Bind(wx.EVT_MENU, self.OnMenuItemQuit, self.menuItemQuit)

        self.Bind(wx.EVT_MENU, self.OnButtonLearn, self.menuItemLearn)
        self.Bind(wx.EVT_MENU, self.OnButtonReview, self.menuItemReview)

        #self.Bind(wx.EVT_MENU, self.OnButtonImport, self.menuItemImport)
        self.Bind(wx.EVT_MENU, self.OnButtonExport, self.menuItemExport)

        self.Bind(wx.EVT_MENU, self.OnMenuItemHelp, self.menuItemHelp)
        self.Bind(wx.EVT_MENU, self.OnMenuItemAbout, self.menuItemAbout)

        wx.EVT_TOOL(self, self.TOOL_NEW, self.OnMenuItemNew)
        wx.EVT_TOOL(self, self.TOOL_OPEN, self.OnMenuItemOpen)
        wx.EVT_TOOL(self, self.TOOL_SAVE, self.OnMenuItemSave)
        wx.EVT_TOOL(self, self.TOOL_SAVEAS, self.OnMenuItemSaveas)
        wx.EVT_TOOL(self, self.TOOL_FLIP, self.OnMenuItemFlip)
        wx.EVT_TOOL(self, self.TOOL_PROPS, self.OnMenuItemProps)
        wx.EVT_TOOL(self, self.TOOL_PREFS, self.OnMenuItemPrefs)

        self.Bind(wx.EVT_BUTTON, self.OnButtonAdd, self.buttonAddCards)
        self.Bind(wx.EVT_BUTTON, self.OnButtonExp, self.buttonExpCards)
        self.Bind(wx.EVT_BUTTON, self.OnButtonDel, self.buttonDelCards)
        self.Bind(wx.EVT_BUTTON, self.OnButtonShuffle, self.buttonShuffleCards)
        self.Bind(wx.EVT_BUTTON, self.OnButtonLearn, self.buttonLearnCards)
        self.Bind(wx.EVT_BUTTON, self.OnButtonReview, self.buttonReviewCards)

    # Event Handlers and related logic

    def OnMenuItemNew(self, event):
        if self.lesson.dirty:
            rval = self._ConfirmClose()
            if rval == wx.CANCEL: return # cancelled
            elif rval == wx.YES: self._SaveLesson()

        self.lesson = Lesson.Lesson()
        self._LessonChanged()

    def OnMenuItemOpen(self, event):
        dlg = wx.FileDialog(self, "Choose a file", Config.GetLastDir(),
                "", "*.xml", wx.OPEN)
        try:
            if dlg.ShowModal() == wx.ID_OK:
                fullname = dlg.GetPath()
                self.lesson = Lesson.Lesson(filename=fullname)
                self._LastDirChanged()
                self._LessonChanged()
                self.UpdateStatus("Loaded %s" % self.lesson.GetBaseName())
        finally:
            dlg.Destroy()

    def OnMenuItemSave(self, event):
        if self.lesson.filename == None:
            return self.OnMenuItemSaveas(event)
        else:
            self.lesson.WriteXML()
            self.UpdateStatus("Saved %s" % self.lesson.GetBaseName())
            return wx.ID_OK

    def OnMenuItemSaveas(self, event):
        # FIXME - if file exists, issue warning!
        dlg = wx.FileDialog(self, "Save file as", Config.GetLastDir(),
                "", "*.xml", wx.SAVE)
        rval = wx.ID_CANCEL
        try:
            rval = dlg.ShowModal()
            if rval == wx.ID_OK:
                fullname = dlg.GetPath()
                self.lesson.filename = fullname
                self.lesson.WriteXML()
                self._LastDirChanged()
                self._LessonChanged()
                self.UpdateStatus("Saved as %s" % self.lesson.GetBaseName())
        finally:
            dlg.Destroy()
        return rval

    def OnMenuItemClose(self, event):
        if self.lesson.dirty:
            rval = self._ConfirmClose()

            if rval == wx.CANCEL: return # user cancelled
            elif rval == wx.YES:
                if self.OnMenuItemSave(event) == wx.ID_CANCEL:
                    return # user cancelled save operation

        oldname = self.lesson.GetBaseName()
        self.lesson = Lesson.Lesson()
        self._LessonChanged()
        self.UpdateStatus("Closed %s" % oldname)

    def OnMenuItemQuit(self, event):
        self.Close()
        
    def OnMenuItemAbout(self, event):
        self._OpenAboutDialog()

    def OnMenuItemHelp(self, event):
        event.Skip()
        
    def _ConfirmClose(self):
        return wx.MessageBox(
            "The lesson has been modified.\n" + \
            "Would you like to save it before closing?", "Confirm",
            wx.YES_NO|wx.CANCEL|wx.CENTRE|wx.ICON_QUESTION)
    
    def _OpenAboutDialog(self):
        dlg = AboutDialog.AboutDialog(self)
        try:
            dlg.ShowModal()
        finally:
            dlg.Destroy()

    def OnWindowClose(self, event):
        if self.lesson.dirty:
            rval = self._ConfirmClose()

            if rval == wx.CANCEL:
                event.Veto()
                return # user cancelled
            elif rval == wx.YES:
                if self.OnMenuItemSave(event) == wx.ID_CANCEL:
                    event.Veto()
                    return # user cancelled save operation

        self.Destroy()

    def OnMenuItemFlip(self, event):
        focus = self.lesson.focus
        if focus == BACK: focus = MIDDLE
        elif focus == MIDDLE: focus = FRONT
        elif focus == FRONT: focus = BACK
        self.lesson.focus = focus
        self._LessonChanged()
        self.UpdateStatus("Now studying: %s" % SIDENAMES[focus])

    def OnMenuItemProps(self, event):
        dlg = PropertiesDialog.PropertiesDialog(self, lesson=self.lesson)
        try:
            if dlg.ShowModal() == wx.ID_OK: self._LessonChanged()
        finally:
            dlg.Destroy()

    def OnMenuItemPrefs(self, event):
        # FIXME currently only does font selection
        fdata = wx.FontData()
        fdata.SetInitialFont(Config.GetFont())
        dlg = wx.FontDialog(self, fdata)
        try:
            if dlg.ShowModal() == wx.ID_OK:
                fdata = dlg.GetFontData()
                font = fdata.GetChosenFont()
                Config.SetFont(font.GetFaceName(),
                        font.GetStyle(),
                        font.GetWeight(),
                        font.GetPointSize())
                self.cardList.SetFont(Config.GetFont())
        finally:
            dlg.Destroy()

    def OnButtonAdd(self, event):
        dlg = AddDialog.AddDialog(self, lesson=self.lesson)
        try:
            dlg.ShowModal()
            self.pilesPanel.Update(self.lesson)
        finally:
            dlg.Destroy()

    def OnButtonExp(self, event):
        count = self.cardList.GetSelectedItemCount()
        if count == 0: return

        cards = self.cardList.GetSelectedCards()
        for c in cards:
            #c.Downgrade(self.lesson.focus)
            c.Expire(self.lesson.focus)

        self.lesson.AnalyzeCards()
        self.pilesPanel.Update(self.lesson)

    def OnButtonDel(self, event):
        count = self.cardList.GetSelectedItemCount()
        if count == 0: return

        cards = self.cardList.GetSelectedCards()
        for c in cards: self.lesson.DelCard(c, analyze=False)

        self.lesson.AnalyzeCards()
        self.pilesPanel.Update(self.lesson)

    def OnButtonShuffle(self, event):
        self.lesson.ShuffleCards()
        self.cardList.Refresh()

    def OnButtonLearn(self, event):
        # Check first to see if this is even necessary
        if not self.lesson.HasUnlearnedCards():
            wx.MessageBox(
                "There are no new cards to learn!", "Message",
                wx.OK|wx.CENTRE|wx.ICON_EXCLAMATION)
            return

        dlg = TrainerDialog.TrainerLearnDialog(self, lesson=self.lesson)
        try:
            dlg.ShowModal()
            self.lesson.AnalyzeCards() # Re-stack them
            self.pilesPanel.Update(self.lesson) # And refresh the view
        finally:
            dlg.Destroy()

    def OnButtonReview(self, event):
        # Check first to see if this is even necessary
        if not self.lesson.HasExpiredCards():
            wx.MessageBox(
                "There are no expired cards to review!", "Message",
                wx.OK|wx.CENTRE|wx.ICON_EXCLAMATION)
            return

        dlg = TrainerDialog.TrainerReviewDialog(self, lesson=self.lesson)
        try:
            dlg.ShowModal()
            self.lesson.AnalyzeCards() # Re-stack them
            self.pilesPanel.Update(self.lesson) # And refresh the view
        finally:
            dlg.Destroy()

    def OnButtonExport(self, event):
        count = self.cardList.GetSelectedItemCount()
        if count == 0: return

        cards = self.cardList.GetSelectedCards()
        outfile = open('/tmp/export.tex', 'w') # FIXME
        outfile.write( """\\documentclass[twocolumn,landscape]{article}
\\usepackage[ibycus,english]{babel}
\\begin{document}
\\subsection*{%s}
\\begin{description}
""" % self.lesson.title )
        for c in cards:
            outfile.write("\\item[%s %s] %s\n" % \
                (c.GetTextRaw(FRONT), c.GetTextRaw(MIDDLE), c.GetText(BACK)))
        outfile.write( r"""\end{description}

\end{document}
""" )
        outfile.close()

    # Utility methods

    def _LastDirChanged(self):
        """ Updates the setting for the 'last used directory'. This is helpful
        when you're opening and saving files """

        dir = self.lesson.GetDirName()
        if dir: Config.SetLastDir(dir)

    def _LessonChanged(self):
        """ Updates GUI elements with Lesson info. Called when lesson
        properties have changed or when a new lesson has been loaded. """

        self.SetTitle((u'%s - %s') % (APPNAME, self.lesson.GetBaseName()))
        self.UpdateHeader(self.lesson.title, self.lesson.focus)

        self.cardList.lesson = self.lesson
        self.cardList.stackname = SUMMARY
        self.pilesPanel.Update(self.lesson)

    def UpdateHeader(self, title, focus):
        self.labelLessonFocus.SetLabel("[studying: %s]" % SIDENAMES[focus])
        self.labelLessonTitle.SetLabel(title)

    def UpdateStatus(self, message):
        self.statusBar.SetStatusText(message, 0)

# end of class MainFrame


